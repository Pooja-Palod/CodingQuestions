https://leetcode.com/problems/sentence-similarity-ii/
class Solution:
    def areSentencesSimilarTwo(self, sentence1: List[str], sentence2: List[str], similarPairs: List[List[str]]) -> bool:
       
        if len(sentence1)!=len(sentence2):
            return False
        parent={}
        rank={}
        
        
        for similarPair in similarPairs:
            parent[similarPair[0]] = similarPair[0]
            parent[similarPair[1]] = similarPair[1]
            rank[similarPair[0]] = 1
            rank[similarPair[1]] = 1
        
        #path compression
        def find(n):
            res=n
            while res!=parent[res]:
                parent[res]=parent[parent[res]]
                res=parent[res]
            return res
        
        #union by rank
        def union(n1,n2):
            p1=find(n1)
            p2=find(n2)
            if p1!=p2:
                if rank[p1]>rank[p2]:
                    parent[p2]=p1
                elif rank[p1]<rank[p2]:
                    parent[p1]=p2
                else:
                    parent[p1]=p2
                    rank[p1]+=rank[p2]
            
            
        for similarPair in similarPairs:
            union(*similarPair)
        
        for i in range(len(sentence1)):
           
            if sentence1[i] == sentence2[i]:
                continue
            if not sentence1[i] in parent or not sentence2[i] in parent:
                return False
            if find(sentence1[i])!=find(sentence2[i]):
                return False
   
        return True
           
        
